/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.dtcc.gcpdemo.api;

import com.dtcc.gcpdemo.model.CalendarDay;
import com.dtcc.gcpdemo.model.Currency;
import java.time.LocalDate;
import com.dtcc.gcpdemo.model.NextSettlementDay;
import com.dtcc.gcpdemo.model.ProblemFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-12T15:34:08.343888500+05:30[Asia/Calcutta]")
@Validated
public interface CalendarsApi {

    Logger log = LoggerFactory.getLogger(CalendarsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Obtain the next available settlement date", description = "Returns the next settlement date for a given planned date, currency, and payment method.", tags={ "calendars" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NextSettlementDay.class))),
        
        @ApiResponse(responseCode = "400", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/calendar/next",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<NextSettlementDay> getNextSettlementDate(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The payment method" ,required=true,schema=@Schema(allowableValues={ "STFO", "SWIFT" }
)) @Valid @RequestParam(value = "paymentMethod", required = true) String paymentMethod, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The date for the proposed payment" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "plannedDate", required = true) LocalDate plannedDate, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The settlement currency" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "currency", required = true) Currency currency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"nextSettlementDate\" : \"2022-12-31T00:00:00.000+00:00\",\r\n  \"currency\" : \"NOK\"\r\n}", NextSettlementDay.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CalendarsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "the GET method for a single calendar day", description = "Retrieve a calendar day for display or update", tags={ "calendars" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "single calendar entry", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CalendarDay.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "405", description = "Method Not Found") })
    @RequestMapping(value = "/calendar/{date}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CalendarDay> getSettlementCalendarByDate(@Parameter(in = ParameterIn.PATH, description = "the unique resource identifier for the document", required=true, schema=@Schema()) @PathVariable("date") LocalDate date) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"calendarDate\" : \"2022-12-31T00:00:00.000+00:00\",\r\n  \"currencies\" : \"[\n  {\n    \"currency\": \"AUD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"CAD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"CHF\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"DKK\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"EUR\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"GBP\",\n    \"stfoSettlementAllowed\": false,\n    \"swiftSettlementAllowed\": false\n  },\n  {\n    \"currency\": \"HKD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"JPY\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"NOK\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"NZD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"SEK\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"SGD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"USD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"ZAR\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  }\n]\n\"\r\n}", CalendarDay.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CalendarsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "the PUT method for a single calendar day", description = "Updates a calendar day record", tags={ "calendars" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "calendar entry updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CalendarDay.class))),
        
        @ApiResponse(responseCode = "400", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "409", description = "Conflict - the `If-Match` value supplied on the request does not match the current `Etag` of the record") })
    @RequestMapping(value = "/calendar/{date}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<CalendarDay> updateSettlementCalendarDay(@Parameter(in = ParameterIn.HEADER, description = "an optimistic lock token respresenting the resource state; usually a hex-encoded MD5 hash value. Obtained from the `Etag` response header of a previous GET request for the resource." ,required=true,schema=@Schema()) @RequestHeader(value="If-Match", required=true) String ifMatch, @Parameter(in = ParameterIn.PATH, description = "the unique resource identifier for the document", required=true, schema=@Schema()) @PathVariable("date") LocalDate date, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CalendarDay body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"calendarDate\" : \"2022-12-31T00:00:00.000+00:00\",\r\n  \"currencies\" : \"[\n  {\n    \"currency\": \"AUD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"CAD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"CHF\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"DKK\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"EUR\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"GBP\",\n    \"stfoSettlementAllowed\": false,\n    \"swiftSettlementAllowed\": false\n  },\n  {\n    \"currency\": \"HKD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"JPY\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"NOK\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"NZD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"SEK\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"SGD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"USD\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  },\n  {\n    \"currency\": \"ZAR\",\n    \"stfoSettlementAllowed\": true,\n    \"swiftSettlementAllowed\": true\n  }\n]\n\"\r\n}", CalendarDay.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CalendarsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

