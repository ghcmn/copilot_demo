/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.dtcc.gcpdemo.api;

import com.dtcc.gcpdemo.model.KeyValuePair;
import java.time.OffsetDateTime;
import com.dtcc.gcpdemo.model.OptionalIdentifiers;
import com.dtcc.gcpdemo.model.ProblemFormat;
import com.dtcc.gcpdemo.model.Settlement;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-12T15:34:08.343888500+05:30[Asia/Calcutta]")
@Validated
public interface SettlementsApi {

    Logger log = LoggerFactory.getLogger(SettlementsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "adds a new settlement", description = "Creates a new settlement. All data fields are validated", tags={ "settlements" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "item created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Settlement.class))),
        
        @ApiResponse(responseCode = "400", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "409", description = "an existing duplicate item already exists") })
    @RequestMapping(value = "/settlement",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Settlement> createSettlement(@Parameter(in = ParameterIn.DEFAULT, description = "settlement to be created", required=true, schema=@Schema()) @Valid @RequestBody Settlement body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"originatingIdentifiers\" : {\r\n    \"application\" : \"TREATY\",\r\n    \"treatyIds\" : {\r\n      \"brokerId\" : \"666\",\r\n      \"lineItem\" : \"17\",\r\n      \"statementId\" : \"s123456\",\r\n      \"brokerGroupId\" : \"xyz775\",\r\n      \"treatyId\" : \"123456789\"\r\n    },\r\n    \"premiumIds\" : {\r\n      \"premiumId\" : \"c1234\"\r\n    },\r\n    \"claimIds\" : {\r\n      \"claimId\" : \"c1234\"\r\n    }\r\n  },\r\n  \"exchangeRate\" : 1,\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"optionalIdentifiers\" : {\r\n    \"paymentId\" : \"13356f3d-fcff-423b-870f-553fac0675f1\",\r\n    \"netSettlementId\" : \"d5eecee5-6173-4c94-8e01-26cef1dbde5a\",\r\n    \"cancellationId\" : \"37e9882a-984f-453e-a676-ed9e841c3150\"\r\n  },\r\n  \"scheduleDate\" : \"2021-08-29T09:12:33.001Z\",\r\n  \"paymentMethod\" : \"STFO\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"uniqueRef\" : \"77add1d5f41223d5582fca736a5cb335\",\r\n  \"debit\" : {\r\n    \"amount\" : 2999.99,\r\n    \"accountIdentifier\" : \"GB33BUKB20201555555556\",\r\n    \"currency\" : \"NOK\"\r\n  }\r\n}", Settlement.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SettlementsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Delete a settlement record", description = "Hard delete of a settlement record. Intended for use only in testing and possibly by applications support staff. Does not check to see if the record has already been aggregated, cancelled or paid. _Caveat emptor..._", tags={ "settlements" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successful deletion"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict - the `If-Match` value supplied on the request does not match the current `Etag` of the record") })
    @RequestMapping(value = "/settlement/{id}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteSettlement(@Parameter(in = ParameterIn.PATH, description = "the unique resource identifier for the settlement", required=true, schema=@Schema()) @PathVariable("id") UUID id, @Parameter(in = ParameterIn.HEADER, description = "an optimistic lock token respresenting the resource state; usually a hex-encoded MD5 hash value. Obtained from the `Etag` response header of a previous GET request for the resource." ,required=true,schema=@Schema()) @RequestHeader(value="If-Match", required=true) String ifMatch) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SettlementsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Find settlements that meet specific search criteria", description = "A flexible search capability. Currently using a POST method due to restrictions in OpenAPI 3.0.0, but this will be deprecated later in favour of a GET with a request body which is allowed at OpenAPI 3.0.3...", tags={ "settlements" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success. Note that no matching items (empty array returned) is considered a successful execution.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Settlement.class)))),
        
        @ApiResponse(responseCode = "400", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/search",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<List<Settlement>> findSettlements(@Parameter(in = ParameterIn.DEFAULT, description = "Name-value pairs for keyword searches. All search criteria are ANDed together to filter the results", required=true, schema=@Schema()) @Valid @RequestBody List<KeyValuePair> body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"originatingIdentifiers\" : {\r\n    \"application\" : \"TREATY\",\r\n    \"treatyIds\" : {\r\n      \"brokerId\" : \"666\",\r\n      \"lineItem\" : \"17\",\r\n      \"statementId\" : \"s123456\",\r\n      \"brokerGroupId\" : \"xyz775\",\r\n      \"treatyId\" : \"123456789\"\r\n    },\r\n    \"premiumIds\" : {\r\n      \"premiumId\" : \"c1234\"\r\n    },\r\n    \"claimIds\" : {\r\n      \"claimId\" : \"c1234\"\r\n    }\r\n  },\r\n  \"exchangeRate\" : 1,\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"optionalIdentifiers\" : {\r\n    \"paymentId\" : \"13356f3d-fcff-423b-870f-553fac0675f1\",\r\n    \"netSettlementId\" : \"d5eecee5-6173-4c94-8e01-26cef1dbde5a\",\r\n    \"cancellationId\" : \"37e9882a-984f-453e-a676-ed9e841c3150\"\r\n  },\r\n  \"scheduleDate\" : \"2021-08-29T09:12:33.001Z\",\r\n  \"paymentMethod\" : \"STFO\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"uniqueRef\" : \"77add1d5f41223d5582fca736a5cb335\",\r\n  \"debit\" : {\r\n    \"amount\" : 2999.99,\r\n    \"accountIdentifier\" : \"GB33BUKB20201555555556\",\r\n    \"currency\" : \"NOK\"\r\n  }\r\n}, {\r\n  \"originatingIdentifiers\" : {\r\n    \"application\" : \"TREATY\",\r\n    \"treatyIds\" : {\r\n      \"brokerId\" : \"666\",\r\n      \"lineItem\" : \"17\",\r\n      \"statementId\" : \"s123456\",\r\n      \"brokerGroupId\" : \"xyz775\",\r\n      \"treatyId\" : \"123456789\"\r\n    },\r\n    \"premiumIds\" : {\r\n      \"premiumId\" : \"c1234\"\r\n    },\r\n    \"claimIds\" : {\r\n      \"claimId\" : \"c1234\"\r\n    }\r\n  },\r\n  \"exchangeRate\" : 1,\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"optionalIdentifiers\" : {\r\n    \"paymentId\" : \"13356f3d-fcff-423b-870f-553fac0675f1\",\r\n    \"netSettlementId\" : \"d5eecee5-6173-4c94-8e01-26cef1dbde5a\",\r\n    \"cancellationId\" : \"37e9882a-984f-453e-a676-ed9e841c3150\"\r\n  },\r\n  \"scheduleDate\" : \"2021-08-29T09:12:33.001Z\",\r\n  \"paymentMethod\" : \"STFO\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"uniqueRef\" : \"77add1d5f41223d5582fca736a5cb335\",\r\n  \"debit\" : {\r\n    \"amount\" : 2999.99,\r\n    \"accountIdentifier\" : \"GB33BUKB20201555555556\",\r\n    \"currency\" : \"NOK\"\r\n  }\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SettlementsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Find settlements that are eligible for aggregation", description = "Finds settlements with the same payment method between two dateTimes, that haven't already been aggregated. Settlements that have **any** of the optional identifiers will not be included in the returned list, as they have previously been aggregated, paid, or cancelled.", tags={ "settlements" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success. Note that no matching items (empty array returned) is considered a successful execution.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Settlement.class)))),
        
        @ApiResponse(responseCode = "400", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/search",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Settlement>> findSettlementsForAggregation(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The payment method. All settlements returned will have this payment method." ,required=true,schema=@Schema(allowableValues={ "STFO", "SWIFT", "VITESSE", "NONE" }
)) @Valid @RequestParam(value = "paymentMethod", required = true) String paymentMethod, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The exclusive lower bound for selection. All settlements selected will have a `scheduleDate` greater than this value." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "from", required = true) OffsetDateTime from, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The inclusive upper bound for selection. All settlements selected will have a `scheduleDate` less than or equal to this value." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "to", required = true) OffsetDateTime to) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"originatingIdentifiers\" : {\r\n    \"application\" : \"TREATY\",\r\n    \"treatyIds\" : {\r\n      \"brokerId\" : \"666\",\r\n      \"lineItem\" : \"17\",\r\n      \"statementId\" : \"s123456\",\r\n      \"brokerGroupId\" : \"xyz775\",\r\n      \"treatyId\" : \"123456789\"\r\n    },\r\n    \"premiumIds\" : {\r\n      \"premiumId\" : \"c1234\"\r\n    },\r\n    \"claimIds\" : {\r\n      \"claimId\" : \"c1234\"\r\n    }\r\n  },\r\n  \"exchangeRate\" : 1,\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"optionalIdentifiers\" : {\r\n    \"paymentId\" : \"13356f3d-fcff-423b-870f-553fac0675f1\",\r\n    \"netSettlementId\" : \"d5eecee5-6173-4c94-8e01-26cef1dbde5a\",\r\n    \"cancellationId\" : \"37e9882a-984f-453e-a676-ed9e841c3150\"\r\n  },\r\n  \"scheduleDate\" : \"2021-08-29T09:12:33.001Z\",\r\n  \"paymentMethod\" : \"STFO\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"uniqueRef\" : \"77add1d5f41223d5582fca736a5cb335\",\r\n  \"debit\" : {\r\n    \"amount\" : 2999.99,\r\n    \"accountIdentifier\" : \"GB33BUKB20201555555556\",\r\n    \"currency\" : \"NOK\"\r\n  }\r\n}, {\r\n  \"originatingIdentifiers\" : {\r\n    \"application\" : \"TREATY\",\r\n    \"treatyIds\" : {\r\n      \"brokerId\" : \"666\",\r\n      \"lineItem\" : \"17\",\r\n      \"statementId\" : \"s123456\",\r\n      \"brokerGroupId\" : \"xyz775\",\r\n      \"treatyId\" : \"123456789\"\r\n    },\r\n    \"premiumIds\" : {\r\n      \"premiumId\" : \"c1234\"\r\n    },\r\n    \"claimIds\" : {\r\n      \"claimId\" : \"c1234\"\r\n    }\r\n  },\r\n  \"exchangeRate\" : 1,\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"optionalIdentifiers\" : {\r\n    \"paymentId\" : \"13356f3d-fcff-423b-870f-553fac0675f1\",\r\n    \"netSettlementId\" : \"d5eecee5-6173-4c94-8e01-26cef1dbde5a\",\r\n    \"cancellationId\" : \"37e9882a-984f-453e-a676-ed9e841c3150\"\r\n  },\r\n  \"scheduleDate\" : \"2021-08-29T09:12:33.001Z\",\r\n  \"paymentMethod\" : \"STFO\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"uniqueRef\" : \"77add1d5f41223d5582fca736a5cb335\",\r\n  \"debit\" : {\r\n    \"amount\" : 2999.99,\r\n    \"accountIdentifier\" : \"GB33BUKB20201555555556\",\r\n    \"currency\" : \"NOK\"\r\n  }\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SettlementsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "returns a single settlement by ID", description = "Retrieve a settlement by its unique identifier", tags={ "settlements" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "single settlement", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Settlement.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "405", description = "Method Not Allowed") })
    @RequestMapping(value = "/settlement/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Settlement> getSettlementById(@Parameter(in = ParameterIn.PATH, description = "the unique resource identifier for the document", required=true, schema=@Schema()) @PathVariable("id") UUID id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"originatingIdentifiers\" : {\r\n    \"application\" : \"TREATY\",\r\n    \"treatyIds\" : {\r\n      \"brokerId\" : \"666\",\r\n      \"lineItem\" : \"17\",\r\n      \"statementId\" : \"s123456\",\r\n      \"brokerGroupId\" : \"xyz775\",\r\n      \"treatyId\" : \"123456789\"\r\n    },\r\n    \"premiumIds\" : {\r\n      \"premiumId\" : \"c1234\"\r\n    },\r\n    \"claimIds\" : {\r\n      \"claimId\" : \"c1234\"\r\n    }\r\n  },\r\n  \"exchangeRate\" : 1,\r\n  \"audit\" : {\r\n    \"at\" : \"2021-03-03T08:24:51Z\",\r\n    \"user\" : \"svc99\"\r\n  },\r\n  \"optionalIdentifiers\" : {\r\n    \"paymentId\" : \"13356f3d-fcff-423b-870f-553fac0675f1\",\r\n    \"netSettlementId\" : \"d5eecee5-6173-4c94-8e01-26cef1dbde5a\",\r\n    \"cancellationId\" : \"37e9882a-984f-453e-a676-ed9e841c3150\"\r\n  },\r\n  \"scheduleDate\" : \"2021-08-29T09:12:33.001Z\",\r\n  \"paymentMethod\" : \"STFO\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"uniqueRef\" : \"77add1d5f41223d5582fca736a5cb335\",\r\n  \"debit\" : {\r\n    \"amount\" : 2999.99,\r\n    \"accountIdentifier\" : \"GB33BUKB20201555555556\",\r\n    \"currency\" : \"NOK\"\r\n  }\r\n}", Settlement.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SettlementsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Mark a settlement as paid, aggregated, or cancelled", description = "Allows a `netSettlementId`, `paymentId`, or `cancellationId` to be added to a settlement. Once an ID has been added, it cannot be updated or removed. Settlements that already have either a `netSettlementId` or `paymentId` cannot be cancelled by giving them a `cancellationId`. You can add a `netSettlementId` and a `paymentId` together in the same call if you wish.", tags={ "settlements" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "the attribute(s) requested have been added to the record"),
        
        @ApiResponse(responseCode = "400", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "409", description = "Errors occurred", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProblemFormat.class))) })
    @RequestMapping(value = "/settlement/{id}",
        produces = { "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> markSettlement(@Parameter(in = ParameterIn.PATH, description = "the unique resource identifier for the document", required=true, schema=@Schema()) @PathVariable("id") UUID id, @Parameter(in = ParameterIn.DEFAULT, description = "identifier(s) to be added", required=true, schema=@Schema()) @Valid @RequestBody OptionalIdentifiers body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SettlementsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

